var documenterSearchIndex = {"docs":
[{"location":"use/construction/#Constructing-NanoDates","page":"Construction","title":"Constructing NanoDates","text":"","category":"section"},{"location":"use/construction/","page":"Construction","title":"Construction","text":"All of the ways available to construct DateTimes work with NanoDates.  And there are a few additional constructors that make work microseconds and nanoseconds easier.  NanoDate constructors are best understood by example. We will set some variables for later clarity.","category":"page"},{"location":"use/construction/","page":"Construction","title":"Construction","text":"using Dates, NanoDates\n\n# lets get the parts from Dates\n\n\nyears, months, days = (2022, 4, 28);\nhours, mins, secs, millis, micros, nanos = \n  (14, 32, 10, 123, 456, 789);\n\nadate = Date(years, months, days)\n# 2022-04-28\n\natime = Time(hours, mins, secs, millis, micros, nanos)\n# 14:32:10.123456789\n\n# to get a DateTime from a Date and a Time safely\n# > atime_ms = trunc(atime, Millisecond)\n# > adatetime = DateTime(adate, atime_ms)\n# NanoDates exports `date_time` that does this\n\nadatetime = date_time(adate, atime)\n# 2022-04-28T14:32:10.123","category":"page"},{"location":"use/construction/","page":"Construction","title":"Construction","text":"Here are familiar constructor methods.","category":"page"},{"location":"use/construction/","page":"Construction","title":"Construction","text":"nd = NanoDate(adate)\n# 2022-04-28T00:00:00\n\nnd = NanoDate(adatetime)\n# 2022-04-28T14:32:10.123\n\nnd = NanoDate(adate, atime)\n# 2022-04-28T14:32:10.123456789","category":"page"},{"location":"use/construction/","page":"Construction","title":"Construction","text":"Here are some of the methods that take values","category":"page"},{"location":"use/construction/","page":"Construction","title":"Construction","text":"nd = NanoDate(years)\n# 2022-01-01T00:00:00\n\nnd = NanoDate(years, months)\n# 2022-04-01T00:00:00\n\nnd = NanoDate(years, months, days, \n                     hours, mins, secs)\n# 2022-04-28T14:32:10\n\nnd = NanoDate(years, months, days, \n                     hours, mins, secs,\n                     millis, micros, nanos)\n# 2022-04-28T14:32:10.123456789","category":"page"},{"location":"use/construction/","page":"Construction","title":"Construction","text":"And some of the methods that take periods","category":"page"},{"location":"use/construction/","page":"Construction","title":"Construction","text":"nd = NanoDate(Year(years))\n# 2022-01-01T00:00:00\n\nnd = NanoDate(Year(years), Month(months))\n# 2022-04-01T00:00:00\n\nnd = NanoDate(\n    Year(years), Month(months), Day(days), \n    Hour(hours), Minute(mins), Second(secs))\n# 2022-04-28T14:32:10\n\nnd = NanoDate(\n    Year(years), Month(months), Day(days), \n    Hour(hours), Minute(mins), Second(secs),\n    Millisecond(millis), Microsecond(micros),\n    Nanosecond(nanos))\n# 2022-04-28T14:32:10.123456789","category":"page"},{"location":"use/intostring/#Converting-NanoDates-to-Strings","page":"As a string","title":"Converting NanoDates to Strings","text":"","category":"section"},{"location":"use/intostring/","page":"As a string","title":"As a string","text":"The easiest way to obtain your NanoDate as a String is to use string(nanodate).","category":"page"},{"location":"use/intostring/","page":"As a string","title":"As a string","text":"``` using Dates, NanoDates","category":"page"},{"location":"use/intostring/","page":"As a string","title":"As a string","text":"nd = nanonow()","category":"page"},{"location":"use/accessors/#Getting-Parts-of-a-NanoDate","page":"-","title":"Getting Parts of a NanoDate","text":"","category":"section"},{"location":"use/accessors/","page":"-","title":"-","text":"This works just the way it does with Date, Time, and DateTime.","category":"page"},{"location":"use/accessors/","page":"-","title":"-","text":"You can use year, month, day, .., nanosecond You can use Year, Month, Day, ... Nanosecond","category":"page"},{"location":"use/accessors/","page":"-","title":"-","text":"using Dates, NanoDates\n\nadate = Date(\"2022-04-28\")\natime = Time(14, 32, 10, 123, 456, 789)\nnanodate = NanoDate(adate, atime)\n\nyear(nanodate) == 2022\nday(nanodate) == 10\nhour(nanodate) == 14\nnanosecond(nanodate) == 789\n\nYear(nanodate) == Year(2022)\nDay(nanodate) == Day(10)\nHour(nanodate) == Hour(14)\nNanosecond(nanodate) == Nanosecond(789)","category":"page"},{"location":"use/accessors/#Adding/Subtracting-Periods","page":"-","title":"Adding/Subtracting Periods","text":"","category":"section"},{"location":"use/accessors/","page":"-","title":"-","text":"This works just the way it does with Date, Time, and DateTime.","category":"page"},{"location":"use/accessors/","page":"-","title":"-","text":"julia> nanodate\n2022-04-28T14:32:10.123456789\n\njulia> nanodate + Month(2)\n2022-06-28T14:32:10.123456789\n\njulia> nanodate + Month(2) + Second(35)\n2022-06-28T14:32:45.123456789\n\njulia> nanodate - Month(4)\n2021-12-28T14:32:10.123456789\n\njulia> nanodate - Month(4) - Hour(14)\n2021-12-28T00:32:10.123456789\n\njulia> nanodate - Month(4) - Hour(15)\n2021-12-27T23:32:10.123456789","category":"page"},{"location":"use/convenient/#Conveniences","page":"nanonow(), nanonow(UTC) work like now(), now(UTC)","title":"Conveniences","text":"","category":"section"},{"location":"use/convenient/","page":"nanonow(), nanonow(UTC) work like now(), now(UTC)","title":"nanonow(), nanonow(UTC) work like now(), now(UTC)","text":"Here are a few simple timesavers, DateTime work-alikes.","category":"page"},{"location":"use/convenient/","page":"nanonow(), nanonow(UTC) work like now(), now(UTC)","title":"nanonow(), nanonow(UTC) work like now(), now(UTC)","text":"```","category":"page"},{"location":"use/convenient/#nanonow(),-nanonow(UTC)-work-like-now(),-now(UTC)","page":"nanonow(), nanonow(UTC) work like now(), now(UTC)","title":"nanonow(), nanonow(UTC) work like now(), now(UTC)","text":"","category":"section"},{"location":"use/convenient/","page":"nanonow(), nanonow(UTC) work like now(), now(UTC)","title":"nanonow(), nanonow(UTC) work like now(), now(UTC)","text":"julia> now(UTC)                     # 1 millisecond resolution 2022-04-25T10:09:40.094","category":"page"},{"location":"use/convenient/","page":"nanonow(), nanonow(UTC) work like now(), now(UTC)","title":"nanonow(), nanonow(UTC) work like now(), now(UTC)","text":"julia> nanonow(UTC)                 # 100 nanosecond resolution (ymmv) 2022-04-25T10:09:40.094615300","category":"page"},{"location":"use/convenient/#nanotoday()-nanotoday(UTC)-works-like-today(),-adds-today(UTC)","page":"nanonow(), nanonow(UTC) work like now(), now(UTC)","title":"nanotoday() nanotoday(UTC) works like today(), adds today(UTC)","text":"","category":"section"},{"location":"use/convenient/","page":"nanonow(), nanonow(UTC) work like now(), now(UTC)","title":"nanonow(), nanonow(UTC) work like now(), now(UTC)","text":"julia> today() 2022-04-25","category":"page"},{"location":"use/convenient/","page":"nanonow(), nanonow(UTC) work like now(), now(UTC)","title":"nanonow(), nanonow(UTC) work like now(), now(UTC)","text":"julia> nanonow(), nanotoday() 2022-04-25T22:33:44, 2022-04-25","category":"page"},{"location":"use/convenient/","page":"nanonow(), nanonow(UTC) work like now(), now(UTC)","title":"nanonow(), nanonow(UTC) work like now(), now(UTC)","text":"julia> nanotoday(UTC) 2022-04-26","category":"page"},{"location":"#NanoDates.jl","page":"Home","title":"NanoDates.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Offers NanoDate, a date-and-time type with nanosecond resolution","category":"page"},{"location":"#plays-well-with-others","page":"Home","title":"plays well with others","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"NanoDate works like DateTime with more precision\nSupports Dates.jl methods\nInterconverts with DateTime, Date","category":"page"},{"location":"#introduces-enhancements","page":"Home","title":"introduces enhancements","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Adds ranges with CompoundPeriod steps\nAdds periods, a NamedTuple constructor\nAdds round(::Time, ::TimePeriod, ::RoundingMode)","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"installs with  using Pkg; Pkg.add(\"NanoDates\")\nask questions\non Discourse\non Slack\non Zulip – using the stream dates-times-zones\nreport any issues here","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"technical/DatesFunctions/#Getting-Integer-Valued-Information","page":"-","title":"Getting Integer Valued Information","text":"","category":"section"},{"location":"technical/DatesFunctions/","page":"-","title":"-","text":"","category":"page"},{"location":"technical/DatesFunctions/#low-level-internals-from-Dates","page":"-","title":"low level internals from Dates","text":"","category":"section"},{"location":"technical/DatesFunctions/","page":"-","title":"-","text":"function mapping\nvalue(x::T): x –> integer value underlying T\ntoms(x::Period): x –> milliseconds\ntons(x::Period): x –> nanoseconds\n \ndays(x::DatePeriod): x –>  truncates (rounds down, floors)\n ::Nanoseconds .. ::Hour, ::Day, ::Week\n ::Date, ::DateTime –> daycount (RataDie)","category":"page"},{"location":"technical/DatesFunctions/","page":"-","title":"-","text":"","category":"page"}]
}
